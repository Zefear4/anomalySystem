from scapy.all import *
import statistics
from collections import defaultdict
import joblib
import numpy as np
from scapy.layers.inet import IP, TCP, UDP
from sklearn.preprocessing import StandardScaler, LabelEncoder
import requests
from threading import Thread
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
INTERFACE = r'\Device\NPF_{E834C88A-01A5-485F-B061-200D93B6EBDF}'
MODEL_DIR = 'saved_model'
THRESHOLD = 0.95  # –ü–æ—Ä–æ–≥ –¥–ª—è –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
TELEGRAM_TOKEN = '7731072857:AAGh52DU5AupLt8hFo58j9dbtwkoScqkaV4'
TELEGRAM_CHAT_ID = '5033781752'

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
PROTO_VALUES = ['3pc', 'a/n', 'aes-sp3-d', 'any', 'argus', 'aris', 'arp', 'ax.25', 'bbn-rcc', 'bna',
                'br-sat-mon', 'cbt', 'cftp', 'chaos', 'compaq-peer', 'cphb', 'cpnx', 'crtp', 'crudp',
                'dcn', 'ddp', 'ddx', 'dgp', 'egp', 'eigrp', 'emcon', 'encap', 'etherip', 'fc', 'fire',
                'ggp', 'gmtp', 'gre', 'hmp', 'i-nlsp', 'iatp', 'ib', 'icmp', 'idpr', 'idpr-cmtp', 'idrp',
                'ifmp', 'igmp', 'igp', 'il', 'ip', 'ipcomp', 'ipcv', 'ipip', 'iplt', 'ipnip', 'ippc',
                'ipv6', 'ipv6-frag', 'ipv6-no', 'ipv6-opts', 'ipv6-route', 'ipx-n-ip', 'irtp', 'isis',
                'iso-ip', 'iso-tp4', 'kryptolan', 'l2tp', 'larp', 'leaf-1', 'leaf-2', 'merit-inp',
                'mfe-nsp', 'mhrp', 'micp', 'mobile', 'mtp', 'mux', 'narp', 'netblt', 'nsfnet-igp', 'nvp',
                'ospf', 'pgm', 'pim', 'pipe', 'pnni', 'pri-enc', 'prm', 'ptp', 'pup', 'pvp', 'qnx', 'rdp',
                'rsvp', 'rtp', 'rvd', 'sat-expak', 'sat-mon', 'sccopmce', 'scps', 'sctp', 'sdrp',
                'secure-vmtp', 'sep', 'skip', 'sm', 'smp', 'snp', 'sprite-rpc', 'sps', 'srp', 'st2', 'stp',
                'sun-nd', 'swipe', 'tcf', 'tcp', 'tlsp', 'tp++', 'trunk-1', 'trunk-2', 'ttp', 'udp', 'unas',
                'uti', 'vines', 'visa', 'vmtp', 'vrrp', 'wb-expak', 'wb-mon', 'wsn', 'xnet', 'xns-idp',
                'xtp', 'zero']

SERVICE_VALUES = ['-', 'dhcp', 'dns', 'ftp', 'ftp-data', 'http', 'irc', 'pop3', 'radius', 'smtp', 'snmp', 'ssh', 'ssl']

STATE_VALUES = ['CON', 'ECO', 'FIN', 'INT', 'PAR', 'REQ', 'RST', 'URN', 'no']


# –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
class TelegramNotifier:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.base_url = f"https://api.telegram.org/bot{self.token}"

    def send_message(self, text):
        url = f"{self.base_url}/sendMessage"
        params = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        try:
            Thread(target=requests.get, args=(url,), kwargs={'params': params}).start()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
telegram_notifier = TelegramNotifier()


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
def load_models():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Random Forest
        rf_model = joblib.load(os.path.join(MODEL_DIR, 'rf_model.pkl'))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä
        artifacts = joblib.load(os.path.join(MODEL_DIR, 'model_artifacts.joblib'))
        autoencoder = artifacts['autoencoder']
        scaler = artifacts['scaler']

        # –°–æ–∑–¥–∞–µ–º LabelEncoder'—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
        proto_encoder = LabelEncoder().fit(PROTO_VALUES)
        service_encoder = LabelEncoder().fit(SERVICE_VALUES)
        state_encoder = LabelEncoder().fit(STATE_VALUES)

        encoders = {
            'proto': proto_encoder,
            'service': service_encoder,
            'state': state_encoder
        }

        return rf_model, autoencoder, scaler, encoders
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        raise


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
rf_model, autoencoder, scaler, encoders = load_models()


def new_connection():
    return {
        'start_time': None,
        'end_time': None,
        'proto': None,
        'service': None,
        'state': None,
        'spkts': 0,
        'dpkts': 0,
        'sbytes': 0,
        'dbytes': 0,
        'sttl': [],
        'dttl': [],
        'sload': 0,
        'dload': 0,
        'sinpkt': [],
        'dinpkt': [],
        'sjit': [],
        'djit': [],
        'swin': [],
        'dwin': [],
        'last_s_pkt_time': None,
        'last_d_pkt_time': None
    }


connection_stats = defaultdict(new_connection)


def get_service(port):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –ø–æ—Ä—Ç—É —Å —É—á–µ—Ç–æ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    SERVICE_PORTS = {
        80: 'http', 443: 'ssl', 21: 'ftp', 22: 'ssh',
        25: 'smtp', 53: 'dns', 110: 'pop3', 143: 'irc',
        3306: 'mysql', 3389: 'rdp', 5432: 'postgresql',
        67: 'dhcp', 68: 'dhcp', 161: 'snmp', 162: 'snmp',
        1812: 'radius', 1813: 'radius'
    }
    service = SERVICE_PORTS.get(port, '-')
    return service if service in SERVICE_VALUES else '-'


def preprocess_features(stats):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤"""
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        encoded_proto = encoders['proto'].transform([stats['proto']])[0]
        encoded_service = encoders['service'].transform([stats['service']])[0]
        encoded_state = encoders['state'].transform([stats['state']])[0]

        features = [
            stats['dur'],
            encoded_proto,
            encoded_service,
            encoded_state,
            stats['spkts'],
            stats['dpkts'],
            stats['sbytes'],
            stats['dbytes'],
            stats['sttl'],
            stats['dttl'],
            stats['rate'],
            stats['sload'],
            stats['dload'],
            stats['sinpkt'],
            stats['dinpkt'],
            stats['sjit'],
            stats['djit'],
            stats['swin'],
            stats['dwin'],
            stats['ct_srv_src'],
            stats['ct_srv_dst']
        ]

        return scaler.transform([features])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return None


def analyze_with_rf(features):
    """–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é Random Forest"""
    if features is None:
        return False
    return rf_model.predict(features)[0] == 1  # 1 = –∞—Ç–∞–∫–∞


def analyze_with_autoencoder(features):
    """–ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–∞"""
    if features is None:
        return False
    reconstructed = autoencoder.predict(features, verbose=0)
    mse = np.mean(np.power(features - reconstructed, 2), axis=1)
    return mse > THRESHOLD


def log_anomaly(conn_id, stats, detector_type):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ–± –∞–Ω–æ–º–∞–ª–∏–∏"""
    src_ip, dst_ip, sport, dport, _ = conn_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""
üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è ({detector_type})</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚îú‚îÄ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: <code>{src_ip}:{sport} ‚Üí {dst_ip}:{dport}</code>
‚îú‚îÄ –ü—Ä–æ—Ç–æ–∫–æ–ª: <code>{stats['proto']}</code>
‚îú‚îÄ –°–µ—Ä–≤–∏—Å: <code>{stats['service']}</code>
‚îú‚îÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ: <code>{stats['state']}</code>
‚îî‚îÄ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <code>{stats['dur']:.2f} —Å–µ–∫</code>

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:</b>
‚îú‚îÄ –ü–∞–∫–µ—Ç—ã: <code>{stats['spkts']} –∏—Å—Ö. / {stats['dpkts']} –≤—Ö.</code>
‚îú‚îÄ –ë–∞–π—Ç—ã: <code>{stats['sbytes']:,} –∏—Å—Ö. / {stats['dbytes']:,} –≤—Ö.</code>
‚îú‚îÄ –°–∫–æ—Ä–æ—Å—Ç—å: <code>{stats['rate']:.2f} –ø–∞–∫/—Å–µ–∫</code>
‚îú‚îÄ –ù–∞–≥—Ä—É–∑–∫–∞: <code>{stats['sload']:.2f} / {stats['dload']:.2f} –±–∞–π—Ç/—Å–µ–∫</code>
‚îî‚îÄ TTL: <code>{stats['sttl']:.1f} –∏—Å—Ö. / {stats['dttl']:.1f} –≤—Ö.</code>

<b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
‚îú‚îÄ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞–∫–µ—Ç–æ–≤: <code>{stats['sinpkt']:.5f} / {stats['dinpkt']:.5f} —Å–µ–∫</code>
‚îî‚îÄ –î–∂–∏—Ç—Ç–µ—Ä: <code>{stats['sjit']:.5f} / {stats['djit']:.5f} —Å–µ–∫</code>

<b>TCP-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚îî‚îÄ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: <code>{stats['swin']:.1f} / {stats['dwin']:.1f}</code>

<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>
‚îú‚îÄ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞: <code>{stats['ct_srv_src']}</code>
‚îî‚îÄ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é: <code>{stats['ct_srv_dst']}</code>
"""

    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    print(f"\n[!] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è ({detector_type})")
    print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {src_ip}:{sport} -> {dst_ip}:{dport}")
    print(f"–ü—Ä–æ—Ç–æ–∫–æ–ª: {stats['proto']}, –°–µ—Ä–≤–∏—Å: {stats['service']}")
    print(f"–ü–∞–∫–µ—Ç—ã: {stats['spkts']}/{stats['dpkts']}, –ë–∞–π—Ç—ã: {stats['sbytes']}/{stats['dbytes']}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    telegram_notifier.send_message(message)


def process_connection(conn_id, stats):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    try:
        features = preprocess_features(stats)
        if features is None:
            return

        # –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: Random Forest
        if analyze_with_rf(features):
            log_anomaly(conn_id, stats, "Random Forest")
            return

        # –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å: –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä
        if analyze_with_autoencoder(features):
            log_anomaly(conn_id, stats, "Autoencoder")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


def process_packet(packet):
    try:
        if not IP in packet:
            return

        src_ip = packet[IP].src
        dst_ip = packet[IP].dst
        proto = packet[IP].proto

        sport = dport = 0
        if TCP in packet:
            sport = packet[TCP].sport
            dport = packet[TCP].dport
            proto_name = 'tcp'
            tcp_layer = packet[TCP]
        elif UDP in packet:
            sport = packet[UDP].sport
            dport = packet[UDP].dport
            proto_name = 'udp'
            tcp_layer = None
        else:
            proto_name = 'other'
            tcp_layer = None

        # –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        proto_name = proto_name if proto_name in PROTO_VALUES else 'tcp' if proto_name == 'tcp' else 'udp' if proto_name == 'udp' else 'other'

        conn_id = (src_ip, dst_ip, sport, dport, proto)
        reverse_conn_id = (dst_ip, src_ip, dport, sport, proto)

        if conn_id in connection_stats:
            direction = 'forward'
        elif reverse_conn_id in connection_stats:
            direction = 'reverse'
            conn_id = reverse_conn_id
        else:
            direction = 'forward'
            connection_stats[conn_id]['start_time'] = packet.time
            connection_stats[conn_id]['proto'] = proto_name
            connection_stats[conn_id]['service'] = get_service(dport)
            connection_stats[conn_id]['state'] = 'no'  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        stats = connection_stats[conn_id]
        stats['end_time'] = packet.time

        if direction == 'forward':
            stats['spkts'] += 1
            stats['sbytes'] += len(packet)
            if IP in packet:
                stats['sttl'].append(packet[IP].ttl)

            if TCP in packet:
                stats['swin'].append(tcp_layer.window)

                if tcp_layer.flags & 0x02:  # SYN
                    stats['state'] = 'REQ'
                elif tcp_layer.flags & 0x10:  # ACK
                    stats['state'] = 'CON' if stats['state'] != 'REQ' else 'ECO'
                elif tcp_layer.flags & 0x04:  # RST
                    stats['state'] = 'RST'
                elif tcp_layer.flags & 0x01:  # FIN
                    stats['state'] = 'FIN'

            if stats['last_s_pkt_time'] is not None:
                iat = packet.time - stats['last_s_pkt_time']
                stats['sinpkt'].append(iat)
                if len(stats['sinpkt']) > 1:
                    stats['sjit'].append(abs(iat - stats['sinpkt'][-2]))
            stats['last_s_pkt_time'] = packet.time

        else:
            stats['dpkts'] += 1
            stats['dbytes'] += len(packet)
            if IP in packet:
                stats['dttl'].append(packet[IP].ttl)

            if TCP in packet:
                stats['dwin'].append(tcp_layer.window)

            if stats['last_d_pkt_time'] is not None:
                iat = packet.time - stats['last_d_pkt_time']
                stats['dinpkt'].append(iat)
                if len(stats['dinpkt']) > 1:
                    stats['djit'].append(abs(iat - stats['dinpkt'][-2]))
            stats['last_d_pkt_time'] = packet.time

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if stats['state'] in ['FIN', 'RST'] or (stats['spkts'] + stats['dpkts']) >= 20:
            # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            duration = stats['end_time'] - stats['start_time']
            stats['dur'] = max(duration, 0.001)
            stats['rate'] = (stats['spkts'] + stats['dpkts']) / stats['dur']
            stats['sload'] = stats['sbytes'] / stats['dur']
            stats['dload'] = stats['dbytes'] / stats['dur']
            stats['sttl'] = statistics.mean(stats['sttl']) if stats['sttl'] else 0
            stats['dttl'] = statistics.mean(stats['dttl']) if stats['dttl'] else 0
            stats['swin'] = statistics.mean(stats['swin']) if stats['swin'] else 0
            stats['dwin'] = statistics.mean(stats['dwin']) if stats['dwin'] else 0
            stats['sinpkt'] = statistics.mean(stats['sinpkt']) if stats['sinpkt'] else 0
            stats['dinpkt'] = statistics.mean(stats['dinpkt']) if stats['dinpkt'] else 0
            stats['sjit'] = statistics.mean(stats['sjit']) if stats['sjit'] else 0
            stats['djit'] = statistics.mean(stats['djit']) if stats['djit'] else 0

            # –ü–æ–¥—Å—á–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            stats['ct_srv_src'] = sum(1 for conn in connection_stats
                                      if conn[0] == src_ip and conn[3] == dport)
            stats['ct_srv_dst'] = sum(1 for conn in connection_stats
                                      if conn[1] == dst_ip and conn[2] == sport)

            # –ê–Ω–∞–ª–∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            process_connection(conn_id, stats)

            # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            del connection_stats[conn_id]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞: {e}")


def start_detection():
    print("–ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π...")
    print(f"–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {INTERFACE}")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
    telegram_notifier.send_message("üü¢ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –∑–∞–ø—É—â–µ–Ω–∞")

    try:
        sniff(iface=INTERFACE, prn=process_packet, store=0)
    except KeyboardInterrupt:
        print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
        telegram_notifier.send_message("üî¥ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: {e}")
        telegram_notifier.send_message(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise


if __name__ == "__main__":
    start_detection()